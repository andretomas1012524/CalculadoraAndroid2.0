package com.example.andre.calculadoraandroid;

import android.app.LoaderManager;
import android.content.Context;
import android.content.CursorLoader;
import android.content.Intent;
import android.content.Loader;
import android.database.Cursor;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.CursorAdapter;

public class Ativityrecicler extends AppCompatActivity implements LoaderManager.LoaderCallbacks<Cursor>, android.support.v4.app.LoaderManager.LoaderCallbacks<Object> {

    private static final int CursorLoaderID = 0;
    public static final String ECONOMIA_ID="ECONOMIA_ID";
    private EconomiaCursorAdapter EconomiaCursorAdapter;
    private RecyclerView recyclerViewEconomia;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_ativityrecicler);

        recyclerViewEconomia = (RecyclerView) findViewById(R.id.RecyclerViewPrecos);

        recyclerViewEconomia.setLayoutManager(new LinearLayoutManager(this));

        EconomiaCursorAdapter = new EconomiaCursorAdapter(this);
        recyclerViewEconomia.setAdapter(EconomiaCursorAdapter);

        EconomiaCursorAdapter.setViewHolderClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                editEconomia();
            }
        });

        getSupportLoaderManager().restartLoader(CursorLoaderID, null, this);
    }

    private void editEconomia() {
        int id = EconomiaCursorAdapter.getLastEconomiaClicked();
        Intent intent = new Intent(this,EditEconomia.class);
        intent.putExtra(ECONOMIA_ID,id);
        startActivity(intent);
    }


    @Override
    protected void onResume() {
        super.onResume();
        getSupportLoaderManager().restartLoader(CursorLoaderID, null, this);
    }






    @Override
    public Loader<Cursor> onCreateLoader(int i, Bundle bundle) {
        if(i == CursorLoaderID){
            new CursorLoader(this,FuncoesContentProvider.Economia_URI,DbTabelaFuncoes.All_colunas,null,null,null);
        }
        return null;
    =

    /**
     * Called when a previously created loader has finished its load.  Note
     * that normally an application is <em>not</em> allowed to commit fragment
     * transactions while in this call, since it can happen after an
     * activity's state is saved.  See {@link FragmentManager#beginTransaction()
     * FragmentManager.openTransaction()} for further discussion on this.
     * <p>
     * <p>This function is guaranteed to be called prior to the release of
     * the last data that was supplied for this Loader.  At this point
     * you should remove all use of the old data (since it will be released
     * soon), but should not do your own release of the data since its Loader
     * owns it and will take care of that.  The Loader will take care of
     * management of its data so you don't have to.  In particular:
     * <p>
     * <ul>
     * <li> <p>The Loader will monitor for changes to the data, and report
     * them to you through new calls here.  You should not monitor the
     * data yourself.  For example, if the data is a {@link Cursor}
     * and you place it in a {@link CursorAdapter}, use
     * the {@link CursorAdapter#CursorAdapter(Context, * Cursor, int)} constructor <em>without</em> passing
     * in either {@link CursorAdapter#FLAG_AUTO_REQUERY}
     * or {@link CursorAdapter#FLAG_REGISTER_CONTENT_OBSERVER}
     * (that is, use 0 for the flags argument).  This prevents the CursorAdapter
     * from doing its own observing of the Cursor, which is not needed since
     * when a change happens you will get a new Cursor throw another call
     * here.
     * <li> The Loader will release the data once it knows the application
     * is no longer using it.  For example, if the data is
     * a {@link Cursor} from a {@link CursorLoader},
     * you should not call close() on it yourself.  If the Cursor is being placed in a
     * {@link CursorAdapter}, you should use the
     * {@link CursorAdapter#swapCursor(Cursor)}
     * method so that the old Cursor is not closed.
     * </ul>
     *
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
   /* @Override
    public void onLoadFinished(android.support.v4.content.Loader<Object> loader, Object data) {

    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
   /* @Override
    public void onLoaderReset(android.support.v4.content.Loader<Object> loader) {

    }

    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {
        EconomiaCursorAdapter.refreshData(cursor);
    }

    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        EconomiaCursorAdapter.refreshData(null);
    }
}
